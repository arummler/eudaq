name: Full_Build_MacOS

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  ROOT6_FILENAME_MAC: root_v6.18.04.macosx64-10.13-clang100.tar.gz
  CMAKE_DOWNLOAD_PATH: https://cmake.org/files/v3.12
  CMAKE_FILENAME_LINUX: cmake-3.12.2-Linux-x86_64.tar.gz
  CMAKE_FILENAME_MAC: cmake-3.12.2-Darwin-x86_64.tar.gz      
  BUILD_AHCAL: OFF
  BUILD_BIFAHCAL: OFF
  BUILD_TESTING: OFF
  BUILD_WITH_QT4: OFF
  BUILD_allproducer: OFF
  BUILD_altro: OFF
  BUILD_altroUSB: OFF
  BUILD_cmspixel: OFF
  BUILD_depfet: OFF
  BUILD_drs4: OFF
  BUILD_fortis: OFF
  BUILD_gui: ON
  BUILD_main: OFF
  BUILD_manual: OFF
  BUILD_mimoroma: OFF
  BUILD_miniTLU: OFF
  BUILD_ni: OFF
  BUILD_nreader: OFF
  BUILD_offlinemon: OFF
  BUILD_onlinemon: OFF
  BUILD_palpidefs: OFF
  BUILD_pixelmanproducer: OFF
  BUILD_python: OFF
  BUILD_root: OFF
  BUILD_rpi_controller: OFF
  BUILD_taki: OFF
  BUILD_timepixdummy: OFF
  BUILD_tlu: ON
  
    
jobs:
      
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-20.04]
        compiler-cpp: [g++, clang++]            

    steps:
    - uses: actions/checkout@v2

    - name: Cache Qt
      id: cache-qt
      uses: actions/cache@v1
      with:
        path: ../Qt
        key: ${{ runner.os }}-QtCache

    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        cached: ${{ steps.cache-qt.outputs.cache-hit }}
        
    - name: Install LibUSB 1.0
      run: |
           if [ ${{matrix.os}} ~= ^macOS.* ]; then
              brew install libusb
              echo "Installing libUSB 1.0 for MacOS"
           elif [ "${{matrix.os}}" ~= ^ubuntu.* ]; then
              sudo apt-get install --force-yes -y libusb-1.0-0 libusb-1.0-0-dev
              echo "Installing libUSB 1.0 for Linux/Ubuntu"
           else
              echo "${{matrix.os}} not supported"
              exit 1
           fi
      shell: bash

    
    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      env:
        CXX: ${{ matrix.compiler-cpp }}
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_AHCAL=$BUILD_AHCAL -DBUILD_BIFAHCAL=$BUILD_BIFAHCAL -DBUILD_TESTING=$BUILD_TESTING -DBUILD_WITH_QT4=$BUILD_WITH_QT4 -DBUILD_allproducer=$BUILD_allproducer -DBUILD_altro=$BUILD_altro -DBUILD_altroUSB=$BUILD_altroUSB -DBUILD_cmspixel=$BUILD_cmspixel -DBUILD_depfet=$BUILD_depfet -DBUILD_drs4=$BUILD_drs4 -DBUILD_fortis=$BUILD_fortis -DBUILD_gui=$BUILD_gui -DBUILD_main=$BUILD_main -DBUILD_manual=$BUILD_manual -DBUILD_mimoroma=$BUILD_mimoroma -DBUILD_miniTLU=$BUILD_miniTLU -DBUILD_ni=$BUILD_ni -DBUILD_nreader=$BUILD_nreader -DBUILD_offlinemon=$BUILD_offlinemon -DBUILD_onlinemon=$BUILD_onlinemon -DBUILD_palpidefs=$BUILD_palpidefs $PALPIDEFS_SPECIAL_PARAMETERS -DBUILD_pixelmanproducer=$BUILD_pixelmanproducer -DBUILD_python=$BUILD_python -DBUILD_root=$BUILD_root -DBUILD_rpi-controller=$BUILD_rpi_controller -DBUILD_taki=$BUILD_taki -DBUILD_timepixdummy=$BUILD_timepixdummy -DBUILD_tlu=$BUILD_tlu

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE

    - name: Test
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE

